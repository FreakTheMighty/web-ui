// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/** Collects common snippets of generated code. */
library codegen;

import 'file_system/path.dart';
import 'info.dart';
import 'utils.dart';

/**
 * Header with common imports, used in every generated .dart file.  If path is
 * null then there is no file associated with the template (used by testing
 * so we'll display <MEMORY> for file name.
 */
String header(Path path, String libraryName) => """
// Auto-generated from ${path != null ? path.filename : "<MEMORY>"}.
// DO NOT EDIT.

library $libraryName;

$imports
""";

// TODO(sigmund): include only those imports that are used by the code.
String get imports => """
import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
""";

/**
 * The code that will be used to bootstrap the application, this is inlined in
 * the main.html.html output file.
 */
String bootstrapCode(Path userMainImport) => """
library bootstrap;

import '$userMainImport' as userMain;

main() {
  userMain.main();
  userMain.init_autogenerated();
}
""";

/** Generate text for a list of imports. */
String importList(Iterable<Path> imports) =>
  imports.map((url) => "import '$url';").join('\n');

/**
 * Text corresponding to a directive, fixed in case the code is in a different
 * output location.
 */
String directiveText(
    DartDirectiveInfo directive, LibraryInfo src, PathInfo pathInfo) {
  var buff = new StringBuffer();
  var uri = pathInfo.transformUrl(src.inputPath, directive.uri);
  buff..add(directive.label)
      ..add(" '")
      ..add(uri.replaceAll("'", "\\'"))
      ..add("'");
  if (directive.prefix != null) {
    buff..add(' as ')
        ..add(directive.prefix);
  }
  if (directive.show != null) {
    buff..add(' show ')
        ..add(directive.show.join(','));
  }
  if (directive.hide != null) {
    buff..add(' hide ')
        ..add(directive.hide.join(','));
  }
  buff.add(';');
  return buff.toString();
}
