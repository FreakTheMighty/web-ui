// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/**
 * Part of the template compilation that concerns with extracting information
 * from the HTML parse tree.
 */
library analyzer;

import 'dart:coreimpl';
import 'package:html5lib/dom.dart';
import 'source_file.dart';
import 'utils.dart';
import 'world.dart';


/**
 * Finds custom elements in this file and the list of referenced files with
 * component declarations. This is the first pass of analysis on a file.
 */
FileInfo analyzeDefinitions(SourceFile file) {
  var result = new FileInfo(file.filename);
  new _ElementLoader(result).visit(file.document);
  return result;
}

/**
 * Extract relevant information from [source] and it's children.
 * Used for testing.
 */
// TODO(jmesserly): move this into analyzer_test
FileInfo analyzeNode(Node source) {
  var result = new FileInfo();
  new _Analyzer(result).visit(source);
  return result;
}

/** Extract relevant information from all files found from the root document. */
void analyzeFile(SourceFile file, Map<String, FileInfo> info) {
  var fileInfo = info[file.filename];
  fileInfo._importComponents(info);
  new _Analyzer(fileInfo).visit(file.document);
}


/** Information extracted at the file-level. */
class FileInfo {
  final String filename;

  // TODO(terry): Ensure that that the libraryName is a valid identifier:
  //              a..z || A..Z || _ [a..z || A..Z || 0..9 || _]*
  String get libraryName => filename.replaceAll('.', '_');
  String get dartFilename => '$filename.dart';
  String get htmlFilename => '$filename.html';

  /**
   * Target dart scripts loaded via `script` tags, or generated imports.
   * Note that this is used like a set. If the item is in the set, the value
   * will always be `true`.
   */
  // TODO(jmesserly): ideally this would be SplayTreeSet.
  final SplayTreeMap<String, bool> imports;

  /** User code inlined within the page. */
  String get userCode => _userCode.toString();
  StringBuffer _userCode;

  /** Generated analysis info for all elements in the file. */
  final Map<Node, ElementInfo> elements;

  /**
   * All custom element definitions in this file. This may contain duplicates.
   * Normally you should use [components] for lookup.
   */
  final List<ComponentInfo> declaredComponents;

  /**
   * All custom element definitions defined in this file or imported via
   *`<link rel='components'>` tag. Maps from the tag name to the component
   * information. This map is sorted by the tag name.
   */
  final Map<String, ComponentInfo> components;

  /** Files imported with `<link rel="component">` */
  final List<String> componentLinks;

  /** Code generated by the compiler. */
  // TODO(sigmund): should this go somewhere else?
  String generatedCode;

  /** Output HTML generated by the compiler. */
  // TODO(sigmund): should this go somewhere else?
  String generatedHtml;

  FileInfo([this.filename])
      : elements = new Map<Node, ElementInfo>(),
        declaredComponents = new List<ComponentInfo>(),
        components = new SplayTreeMap<String, ComponentInfo>(),
        componentLinks = <String>[],
        imports = new SplayTreeMap<String, bool>(),
        _userCode = new StringBuffer();

  /**
   * Initializes the [components] map by importing all [declaredComponents]
   * in this [FileInfo], then scans all [componentLinks] and imports their
   * [declaredComponents], using [files] to map the href to the file info.
   * Names in this file info will shadow names from imported files.
   */
  void _importComponents(Map<String, FileInfo> files) {
    declaredComponents.forEach(_addComponent);

    for (var link in componentLinks) {
      var file = files[link];
      // We already issued an error for missing files.
      if (file == null) continue;
      file.declaredComponents.forEach(_addComponent);
    }
  }

  /** Adds a component's tag name to the names in scope for this HTML file. */
  void _addComponent(ComponentInfo info) {
    var existing = components[info.tagName];
    if (existing != null) {
      if (existing.file === this && info.file !== this) {
        // Components declared in this file are allowed to shadow component
        // names declared in imported files.
        return;
      }

      if (existing.hasConflict) {
        // No need to report a second error for the same name.
        return;
      }

      existing.hasConflict = true;

      if (info.file === this) {
        world.error('$filename: duplicate custom element definition '
            'for "${info.tagName}":\n  ${existing.element.outerHTML}\n'
            'and:\n  ${info.element.outerHTML}');
      } else {
        world.error('$filename: imported duplicate custom element definitions '
            'for "${info.tagName}"'
            'from "${existing.file.filename}":\n  ${existing.element.outerHTML}'
            '\nand from "${info.file.filename}":\n  ${info.element.outerHTML}');
      }
    } else {
      components[info.tagName] = info;
    }
  }
}

/** Information about a web component definition. */
class ComponentInfo {
  /** The file that declares this component. Used for error messages. */
  final FileInfo file;

  /** The component tag name, defined with the `name` attribute on `element`. */
  final String tagName;

  /** The dart class containing the component's behavior. */
  final String constructor;

  /** The declaring `<element>` tag. */
  final Node element;

  /** The component's `<template>` tag, if any. */
  final Node template;

  /** User code inlined within the page. */
  String get userCode => _userCode.toString();
  StringBuffer _userCode;

  /**
   * True if [tagName] was defined by more than one component. If this happened
   * we will skip over the component.
   */
  bool hasConflict = false;

  ComponentInfo(this.element, this.template, this.tagName, this.constructor,
      [this.file])
      : _userCode = new StringBuffer();
}

/** Information extracted for each node in a template. */
class ElementInfo {

  /** Id given to an element node, if any. */
  String elementId;

  /** Generated field name, if any, associated with this element. */
  // TODO(sigmund): move this to Emitter?
  String elemField;

  /**
   * Whether code generators need to create a field to store a reference to this
   * element. This is typically true whenever we need to access the element
   * (e.g. to add event listeners, update values on data-bound watchers, etc).
   */
  bool get needsHtmlId => hasDataBinding || hasIfCondition || hasIterate
      || component != null || values.length > 0 || events.length > 0;

  /**
   * If this element is a web component instantiation (e.g. `<x-foo>`), this
   * will be set to information about the component, otherwise it will be null.
   */
  ComponentInfo component;

  /** Whether the element contains data bindings. */
  bool hasDataBinding = false;

  /** Data-bound expression used in the contents of the node. */
  String contentBinding;

  /**
   * Expression that returns the contents of the node (given it has a
   * data-bound expression in it).
   */
  // TODO(terry,sigmund): support more than 1 expression in the contents.
  String contentExpression;

  /** Generated watcher disposer that watchs for the content expression. */
  // TODO(sigmund): move somewhere else?
  String stopperName;

  /** Collected information for attributes, if any. */
  final Map<String, AttributeInfo> attributes;

  /** Collected information for UI events on the corresponding element. */
  final Map<String, EventInfo> events;

  /** Collected information about `data-value="name:value"` expressions. */
  final Map<String, String> values;

  /**
   * Format [elementId] in camel case, suitable for using as a Dart identifier.
   */
  String get idAsIdentifier() =>
      elementId == null ? null : '_${toCamelCase(elementId)}';

  ElementInfo()
      : attributes = <AttributeInfo>{},
        events = <EventInfo>{},
        values = {};


  /** Whether the template element has `iterate="... in ...". */
  bool get hasIterate => false;

  /** Whether the template element has an `instantiate="if ..."` conditional. */
  bool get hasIfCondition => false;

  String toString() => '#<ElementInfo '
      'elementId: $elementId, '
      'elemField: $elemField, '
      'needsHtmlId: $needsHtmlId, '
      'component: $component, '
      'hasIterate: $hasIterate, '
      'hasIfCondition: $hasIfCondition, '
      'hasDataBinding: $hasDataBinding, '
      'contentBinding: $contentBinding, '
      'contentExpression: $contentExpression, '
      'attributes: $attributes, '
      'idAsIdentifier: $idAsIdentifier, '
      'events: $events>';
}

/** Information extracted for each attribute in an element. */
class AttributeInfo {

  /**
   * Whether this is a `class` attribute. In which case more than one binding
   * is allowed (one per class).
   */
  bool isClass = false;

  /**
   * A value that will be monitored for changes. All attributes, except `class`,
   * have a single bound value.
   */
  String get boundValue => bindings[0];

  /** All bound values that would be monitored for changes. */
  List<String> bindings;

  AttributeInfo(String value) : bindings = [value];
  AttributeInfo.forClass(this.bindings) : isClass = true;

  String toString() => '#<AttributeInfo '
      'isClass: $isClass, values: ${Strings.join(bindings, "")}>';

  /**
   * Generated fields for watcher disposers based on the bindings of this
   * attribute.
   */
  List<String> stopperNames;
}

/** Information extracted for each declared event in an element. */
class EventInfo {
  /** Event name for attributes representing actions. */
  String eventName;

  /** Generated field name, if any, associated with this event. */
  String listenerField;

  /** Action associated for event listener attributes. */
  ActionDefinition action;

  EventInfo(this.eventName, this.action);

  String toString() => '#<EventInfo eventName: $eventName, action: $action>';
}

class TemplateInfo extends ElementInfo {
  /**
   * The expression that is used in `<template instantiate="if cond">
   * conditionals, or null if this there is no `instantiate="if ..."`
   * attribute.
   */
  final String ifCondition;

  /**
   * If this is a `<template iterate="item in items">`, this is the variable
   * declared on loop iterations, e.g. `item`. This will be null if it is not
   * a `<template iterate="...">`.
   */
  final String loopVariable;

  /**
   * If this is a `<template iterate="item in items">`, this is the expression
   * to get the items to iterate over, e.g. `items`. This will be null if it is
   * not a `<template iterate="...">`.
   */
  final String loopItems;

  TemplateInfo([this.ifCondition, this.loopVariable, this.loopItems]);

  bool get hasIterate => loopVariable != null;

  bool get hasIfCondition => ifCondition != null;

  String toString() => '#<TemplateInfo '
      'ifCondition: $ifCondition, '
      'loopVariable: $ifCondition, '
      'loopItems: $ifCondition>';
}


/**
 * Specifies the action to take on a particular event. Some actions need to read
 * attributes from the DOM element that has the event listener (e.g. two way
 * bindings do this). A reference to this element ([elementVarName]) is
 * generated outside of the analyzer, thus, we parameterize actions here.
 */
typedef String ActionDefinition([String elemVarName]);

/** A visitor that walks the HTML to extract all the relevant information. */
class _Analyzer extends TreeVisitor {
  final FileInfo result;
  int _uniqueId = 0;

  _Analyzer(this.result);

  void visitElement(Element node) {
    ElementInfo info = null;

    if (node.tagName == 'script') {
      // We already extracted script tags in previous phase.
      return;
    }

    if (node.tagName == 'template') {
      // template tags are handled specially.
      info = _createTemplateInfo(node);
    }

    if (info == null) {
      info = new ElementInfo();
    }
    if (node.id != '') info.elementId = node.id;
    result.elements[node] = info;

    node.attributes.forEach((name, value) {
      visitAttribute(node, info, name, value);
    });

    _bindCustomElement(node, info);

    super.visitElement(node);

    // Need to get to this element at codegen time; for template, data binding,
    // or event hookup.  We need an HTML id attribute for this node.
    if (info.needsHtmlId) {
      if (info.elementId == null) {
        info.elementId = "__e-${_uniqueId}";
        node.attributes['id'] = info.elementId;
        _uniqueId++;
      }
      info.elemField = info.idAsIdentifier;
    }
  }

  void _bindCustomElement(Element node, ElementInfo info) {
    // <x-fancy-button>
    var component = result.components[node.tagName];
    if (component == null) {
      // TODO(jmesserly): warn for unknown element tags?

      // <button is="x-fancy-button">
      var isAttr = node.attributes['is'];
      if (isAttr != null) {
        component = result.components[isAttr];
        if (component == null) {
          world.warning('${result.filename}: custom element with tag name'
              ' $isAttr not found.');
        }
      }
    }

    if (component != null && !component.hasConflict) {
      info.component = component;
      // TODO(jmesserly): this needs to normalize relative paths, if the
      // current file is not in the same directory as the component file.
      result.imports[component.file.dartFilename] = true;
    }
  }

  TemplateInfo _createTemplateInfo(Element node) {
    assert(node.tagName == 'template');
    var instantiate = node.attributes['instantiate'];
    var iterate = node.attributes['iterate'];

    // Note: we issue warnings instead of errors because the spirit of HTML and
    // Dart is to be forgiving.
    if (instantiate != null && iterate != null) {
      // TODO(jmesserly): get the node's span here
      world.warning('<template> element cannot have iterate and instantiate '
          'attributes');
      return null;
    }

    if (instantiate != null) {
      if (instantiate.startsWith('if ')) {
        return new TemplateInfo(ifCondition: instantiate.substring(3));
      }

      // TODO(jmesserly): we need better support for <template instantiate>
      // as it exists in MDV. Right now we ignore it, but we provide support for
      // data binding everywhere.
      if (instantiate != '') {
        world.warning('<template instantiate> either have  '
          ' form <template instantiate="if condition" where "condition" is a'
          ' binding that determines if the contents of the template will be'
          ' inserted and displayed.');
      }
    } else if (iterate != null) {
      var match = const RegExp(@"(.*) in (.*)").firstMatch(iterate);
      if (match != null) {
        return new TemplateInfo(loopVariable: match[1], loopItems: match[2]);
      }
      world.warning('<template> iterate must be of the form: '
          'iterate="variable in list", where "variable" is your variable name'
          ' and "list" is the list of items.');
    }
    return null;
  }

  void visitAttribute(Element elem, ElementInfo elemInfo, String name,
                      String value) {
    if (name == 'data-value') {
      _readDataValueAttribute(elem, elemInfo, value);
      return;
    } else if (name == 'data-action') {
      _readDataActionAttribute(elem, elemInfo, value);
      return;
    }

    if (name == 'data-bind') {
      _readDataBindAttribute(elem, elemInfo, value);
    } else {
      var match = const RegExp(@'^\s*{{(.*)}}\s*$').firstMatch(value);
      if (match == null) return;
      // Strip off the outer {{ }}.
      value = match[1];
      if (name == 'class') {
        elemInfo.attributes[name] = _readClassAttribute(elem, elemInfo, value);
      } else {
        // Default to a 1-way binding for any other attribute.
        elemInfo.attributes[name] = new AttributeInfo(value);
      }
    }
    elemInfo.hasDataBinding = true;
  }

  void _readDataValueAttribute(
      Element elem, ElementInfo elemInfo, String value) {
    var colonIdx = value.indexOf(':');
    if (colonIdx <= 0) {
      world.error('data-value attribute should be of the form '
          'data-value="name:value"');
      return;
    }
    var name = value.substring(0, colonIdx);
    value = value.substring(colonIdx + 1);

    elemInfo.values[name] = value;
  }

  void _readDataActionAttribute(
      Element elem, ElementInfo elemInfo, String value) {
    // Special data-attribute specifying an event listener.
    var colonIdx = value.indexOf(':');
    if (colonIdx <= 0) {
      world.error('data-action attribute should be of the form '
          'data-action="eventName:action"');
      return;
    }
    var name = value.substring(0, colonIdx);
    value = value.substring(colonIdx + 1);
    var eventInfo = new EventInfo(name, ([elemVarName]) => value);
    elemInfo.events[name] = eventInfo;
    return;
  }

  AttributeInfo _readDataBindAttribute(
      Element elem, ElementInfo elemInfo, String value) {
    var colonIdx = value.indexOf(':');
    if (colonIdx <= 0) {
      // TODO(jmesserly): get the node's span here
      world.error('data-bind attribute should be of the form '
          'data-bind="name:value"');
      return;
    }

    var attrInfo;
    var name = value.substring(0, colonIdx);
    value = value.substring(colonIdx + 1);
    var isInput = elem.tagName == 'input';
    // Special two-way binding logic for input elements.
    if (isInput && name == 'checked') {
      attrInfo = new AttributeInfo(value);
      // TODO(sigmund): deal with conflicts, e.g. I have a click listener too
      if (elemInfo.events['click'] != null) {
        throw const NotImplementedException(
            'a click listener + a data-bound check box');
      }
      elemInfo.events['click'] = new EventInfo('click',
          // Assume [value] is a property with a setter.
          ([elemVarName]) => '$value = $elemVarName.checked');
    } else if (isInput && name == 'value') {
      attrInfo = new AttributeInfo(value);
      if (elemInfo.events['keyUp'] != null) {
        throw const NotImplementedException(
            'a keyUp listener + a data-bound input value');
      }
      elemInfo.events['keyUp'] = new EventInfo('keyUp',
          // Assume [value] is a property with a setter.
          ([elemVarName]) => '$value = $elemVarName.value');
    } else {
      world.error('Unknown data-bind attribute: ${elem.tagName} - ${name}');
      return;
    }
    elemInfo.attributes[name] = attrInfo;
  }

  AttributeInfo _readClassAttribute(
      Element elem, ElementInfo elemInfo, String value) {
    // Special support to bind each css class separately.
    // class="{{class1}} {{class2}} {{class3}}"
    List<String> bindings = [];
    var parts = value.split(const RegExp(@'}}\s*{{'));
    for (var part in parts) {
      bindings.add(part);
    }
    return new AttributeInfo.forClass(bindings);
  }

  void visitText(Text text) {
    var bindingRegex = const RegExp(@'{{(.*)}}');
    if (!bindingRegex.hasMatch(text.value)) return;

    var parentElem = text.parent;
    ElementInfo info = result.elements[parentElem];
    info.hasDataBinding = true;
    assert(info.contentBinding == null);

    // Match all bindings.
    var buf = new StringBuffer();
    int offset = 0;
    for (var match in bindingRegex.allMatches(text.value)) {
      var binding = match[1];
      // TODO(sigmund,terry): support more than 1 template expression
      if (info.contentBinding == null) {
        info.contentBinding = binding;
      }

      buf.add(text.value.substring(offset, match.start()));
      buf.add("\${$binding}");
      offset = match.end();
    }
    buf.add(text.value.substring(offset));

    var content = buf.toString().replaceAll("'", "\\'").replaceAll('\n', " ");
    info.contentExpression = "'$content'";
  }
}

/** A visitor that finds `<link rel="components">` and `<element>` tags. */
class _ElementLoader extends TreeVisitor {
  final FileInfo result;
  ComponentInfo _component;
  bool _inHead = false;

  _ElementLoader(this.result);

  void visitElement(Element node) {
    switch (node.tagName) {
      case 'link': visitLinkElement(node); break;
      case 'element': visitElementElement(node); break;
      case 'script': visitScriptElement(node); break;
      case 'head':
        var savedInHead = _inHead;
        _inHead = true;
        super.visitElement(node);
        _inHead = savedInHead;
        break;
      default: super.visitElement(node); break;
    }
  }

  void visitLinkElement(Element node) {
    if (node.attributes['rel'] != 'components') return;

    if (!_inHead) {
      world.warning('${result.filename}: link rel="components" only valid in '
          'head:\n  ${node.outerHTML}');
      return;
    }

    var href = node.attributes['href'];
    if (href == null || href == '') {
      world.warning('${result.filename}: link rel="components" missing href:'
          '\n  ${node.outerHTML}');
      return;
    }

    result.componentLinks.add(href);
  }

  void visitElementElement(Element node) {
    // TODO(jmesserly): what do we do in this case? It seems like an <element>
    // inside a Shadow DOM should be scoped to that <template> tag, and not
    // visible from the outside.
    if (_component != null) {
      world.error('${result.filename}: Nested component definitions are not yet'
          ' supported:\n  ${node.outerHTML}');
      return;
    }

    var ctor = node.attributes["constructor"];
    if (ctor == null) {
      world.error('${result.filename}: Missing the class name associated with '
          'this component. Please add an attribute of the form '
          '\'constructor="ClassName"\':\n  ${node.outerHTML}');
      return;
    }

    var tagName = node.attributes["name"];
    if (tagName == null) {
      world.error('${result.filename}: Missing tag name of the Web Component. '
          'Please include an attribute like \'name="x-your-tag-name"\':'
          '\n  ${node.outerHTML}');
      return;
    }

    Element template = null;
    var templates = node.nodes.filter((n) => n.tagName == 'template');
    if (templates.length != 1) {
      world.warning('${result.filename}: an <element> should have exactly one '
          '<template> child:\n  ${node.outerHTML}');
    } else {
      template = templates[0];
    }

    var savedComponent = _component;
    _component = new ComponentInfo(node, template, tagName, ctor, result);
    result.declaredComponents.add(_component);

    super.visitElement(node);

    _component = savedComponent;
  }


  void visitScriptElement(Element node) {
    var scriptType = node.attributes['type'];
    if (scriptType == null) {
      // Note: in html5 leaving off type= is fine, but it defaults to
      // text/javascript. Because this might be a common error, we warn about it
      // and force explicit type="text/javascript".
      // TODO(jmesserly): is this a good warning?
      world.warning('${result.filename}: ignored script tag, possibly missing '
          'type="application/dart" or type="text/javascript":'
          '\n  ${node.outerHTML}');
    }

    if (scriptType != 'application/dart') return;

    // TODO(jmesserly,sigmund): reconcile behavior of <script src=""> vs
    // inline <script>. Also need to figure out what to do about scripts that
    // aren't inside a component.

    var src = node.attributes["src"];
    if (src != null) {
      result.imports[src] = true;

      if (node.nodes.length > 0) {
        world.error('${result.filename}: script tag has "src" attribute and '
            'also has script text:\n  ${node.outerHTML}');
      }
      return;
    }

    if (node.nodes.length == 0) return;

    // I don't think the html5 parser will emit a tree with more than
    // one child of <script>
    assert(node.nodes.length == 1);
    Text text = node.nodes[0];
    if (_component != null) {
      _component._userCode.add(text.value);
    } else {
      result._userCode.add(text.value);
    }
  }
}
