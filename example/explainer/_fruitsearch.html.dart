// Auto-generated from fruitsearch.html.
// DO NOT EDIT.

library fruitsearch_html;

import 'dart:html' as autogenerated;
import 'package:web_components/watcher.dart' as autogenerated;

String query = '';

List<String> fruits = const [ 'Apple', 'Apricot', 'Avocado',
'Banana', 'Blackberry', 'Blackcurrant', 'Blueberry',
'Currant', 'Cherry', 'Clementine', 'Date', 'Durian', 'Fig',
'Gooseberry', 'Grape', 'Grapefruit', 'Guava', 'Huckleberry',
'Kiwi', 'Lemon', 'Lime', 'Lychee', 'Mandarin', 'Mango',
'Cantaloupe', 'Honeydew melon', 'Nectarine', 'Orange',
'Peach', 'Pear', 'Plum', 'Pineapple', 'Pomegranate',
'Raspberry', 'Redcurrant', 'Star fruit', 'Strawberry',
'Tangerine', 'Tomato', 'Watermelon'];

List<String> get results {
  var res = fruits.filter(
  (v) => v.toLowerCase().contains(query.toLowerCase()));
  if (res.length > 20) {
    res.length = 20;
    res.add('... and many more');
  }
  return res;
}

bool get noMatches => results.isEmpty();

main() {}

/** Generated code. */
autogenerated.InputElement ___e0;

autogenerated.EventListener _listener_input_1;

autogenerated.WatcherDisposer _stopWatcher___e0_2;

autogenerated.Element ___e1;

// Fields for template conditional '__e-1'
autogenerated.WatcherDisposer _stopWatcher_if___e1;
autogenerated.Element _childTemplate___e1;
autogenerated.Element _parent___e1;
autogenerated.Element _child___e1;
String _childId___e1;

autogenerated.Element ___e2;

// Fields for template conditional '__e-2'
autogenerated.WatcherDisposer _stopWatcher_if___e2;
autogenerated.Element _childTemplate___e2;
autogenerated.Element _parent___e2;
autogenerated.Element _child___e2;
String _childId___e2;

autogenerated.Element ___e4;

// Fields for template list '__e-4'
autogenerated.Element _childTemplate___e4;
autogenerated.WatcherDisposer _stopWatcher___e4;
List<autogenerated.WatcherDisposer> _removeChild___e4;

/** Create the views and bind them to models. */
void init_autogenerated() {
  // Create view.
  var _root = new autogenerated.DocumentFragment.html(_INITIAL_PAGE);
  
  // Initialize fields.
  ___e0 = _root.query('#__e-0');
  
  ___e1 = _root.query('#__e-1');
  
  assert(___e1.elements.length == 1);
  _childTemplate___e1 = ___e1.elements[0];
  _childId___e1 = _childTemplate___e1.id;
  if (_childId___e1 != null && _childId___e1 != '') {
    _childTemplate___e1.id = '';
  }
  ___e1.style.display = 'none';
  ___e1.nodes.clear();
  
  ___e2 = _root.query('#__e-2');
  
  assert(___e2.elements.length == 1);
  _childTemplate___e2 = ___e2.elements[0];
  _childId___e2 = _childTemplate___e2.id;
  if (_childId___e2 != null && _childId___e2 != '') {
    _childTemplate___e2.id = '';
  }
  ___e2.style.display = 'none';
  ___e2.nodes.clear();
  
  ___e4 = _root.query('#__e-4');
  
  assert(___e4.elements.length == 1);
  _childTemplate___e4 = ___e4.elements[0];
  _removeChild___e4 = [];
  ___e4.nodes.clear();
  
  // Attach model to views.
  _listener_input_1 = (e) {
    query = ___e0.value;
    autogenerated.dispatch();
  };
  ___e0.on.input.add(_listener_input_1);
  
  _stopWatcher___e0_2 = autogenerated.watchAndInvoke(() => query, (e) {
    ___e0.value = e.newValue;
  });
  
  _stopWatcher_if___e1 = autogenerated.watchAndInvoke(() => noMatches, (e) {
    bool showNow = e.newValue;
    if (_child___e1 != null && !showNow) {
      // Remove any listeners/watchers on children
      
      // Remove the actual child
      _child___e1.remove();
      _child___e1 = null;
    } else if (_child___e1 == null && showNow) {
      _child___e1 = _childTemplate___e1.clone(true);
      if (_childId___e1 != null && _childId___e1 != '') {
        _child___e1.id = _childId___e1;
      }
      // Initialize children
      
      ___e1.parent.nodes.add(_child___e1);
      
      // Attach listeners/watchers
      
    }
  });
  
  _stopWatcher_if___e2 = autogenerated.watchAndInvoke(() => !noMatches, (e) {
    bool showNow = e.newValue;
    if (_child___e2 != null && !showNow) {
      // Remove any listeners/watchers on children
      
      // Remove the actual child
      _child___e2.remove();
      _child___e2 = null;
    } else if (_child___e2 == null && showNow) {
      _child___e2 = _childTemplate___e2.clone(true);
      if (_childId___e2 != null && _childId___e2 != '') {
        _child___e2.id = _childId___e2;
      }
      // Initialize children
      
      ___e2.parent.nodes.add(_child___e2);
      
      // Attach listeners/watchers
      
    }
  });
  
  _stopWatcher___e4 = autogenerated.watchAndInvoke(
  () => results, (e) {
    for (var remover in _removeChild___e4) remover();
    _removeChild___e4.clear();
    if (results is Iterable) {
      for (var fruit in results) {
        var child___e4 = _childTemplate___e4.clone(true);
        
        autogenerated.Element ___e3;
        autogenerated.WatcherDisposer _stopWatcher___e3_1;
        
        if (child___e4.id == "__e-3") {
          ___e3 = child___e4;
        } else {
          ___e3 = child___e4.query('#__e-3');
        }
        
        ___e4.parent.nodes.add(child___e4);
        
        // Attach listeners/watchers
        
        _stopWatcher___e3_1 = autogenerated.watchAndInvoke(() => fruit, (e) {
          ___e3.innerHTML = '${fruit}';
        });
        
        // Remember to unregister them
        
        _removeChild___e4.add(() {
          
          child___e4.remove();
          
          _stopWatcher___e3_1();
          
        });
      }
    }
  });
  
  // Attach view to the document.
  autogenerated.document.body.nodes.add(_root);
}

final String _INITIAL_PAGE = r'''
<div style="width:250px;" class="well">
<span>Search for something:</span>
<input type="text" data-bind="value:query" id="__e-0">
<div>
<template instantiate="if noMatches" id="__e-1"><span>No matches</span></template>
<template instantiate="if !noMatches" id="__e-2"><span>Top results:</span></template>
</div>
<div>
<ul>
<template iterate="fruit in results" id="__e-4">
<li id="__e-3">{{fruit}}</li>
</template>
</ul>
</div>
</div>
''';

