// Auto-generated from footer.html.
// DO NOT EDIT.

library x_todo_footer;

import 'dart:html' as autogenerated;
import 'package:web_components/watcher.dart' as autogenerated;

import 'dart:html';
import 'model.dart';
import 'package:web_components/web_component.dart';

class FooterComponent extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  var ___e0;
  
  autogenerated.WatcherDisposer _stopWatcher___e0_1;
  
  var ___e1;
  
  autogenerated.WatcherDisposer _stopWatcher___e1_2;
  
  var ___e2;
  
  autogenerated.WatcherDisposer _stopWatcher___e2_3;
  
  var ___e3;
  
  autogenerated.WatcherDisposer _stopWatcher___e3_4;
  
  var ___e4;
  
  // Fields for template conditional '__e-4'
  autogenerated.WatcherDisposer _stopWatcher_if___e4;
  autogenerated.Element _childTemplate___e4;
  autogenerated.Element _parent___e4;
  autogenerated.Element _child___e4;
  String _childId___e4;
  
  var _clearCompleted;
  
  autogenerated.EventListener _listener_click_1;
  
  autogenerated.WatcherDisposer _stopWatcher_clearCompleted_2;
  
  FooterComponent.forElement(e) : super.forElement(e) {
    _root = createShadowRoot();
  }
  
  void created_autogenerated() {
    if (_root is autogenerated.ShadowRoot) _root.applyAuthorStyles = true;
    
    _root.innerHTML = r'''
    <span id="todo-count"><strong id="__e-0">{{remaining}}</strong></span>
    <ul id="filters">
    <li> <a class="{{allClass}}" href="#/" id="__e-1">All</a> </li>
    <li> <a class="{{activeClass}}" href="#/active" id="__e-2">Active</a> </li>
    <li> <a class="{{completedClass}}" href="#/completed" id="__e-3">Completed</a> </li>
    </ul>
    <template instantiate="if anyDone" id="__e-4">
    <button id="clear-completed" data-action="click:clearDone">
    Clear completed ({{doneCount}})
    </button>
    </template>
    ''';
    
    ___e0 = _root.query('#__e-0');
    
    ___e1 = _root.query('#__e-1');
    
    ___e2 = _root.query('#__e-2');
    
    ___e3 = _root.query('#__e-3');
    
    ___e4 = _root.query('#__e-4');
    
    assert(___e4.elements.length == 1);
    _childTemplate___e4 = ___e4.elements[0];
    _childId___e4 = _childTemplate___e4.id;
    if (_childId___e4 != null && _childId___e4 != '') {
      _childTemplate___e4.id = '';
    }
    ___e4.style.display = 'none';
    ___e4.nodes.clear();
    
    // Call user-defined created();
    created();
  }
  
  void inserted_autogenerated() {
    _stopWatcher___e0_1 = autogenerated.watchAndInvoke(() => remaining, (e) {
      ___e0.innerHTML = '${remaining}';
    });
    
    _stopWatcher___e1_2 = autogenerated.watchAndInvoke(() => allClass, (e) {
      if (e.oldValue != null && e.oldValue != '') {
        ___e1.classes.remove(e.oldValue);
      }
      if (e.newValue != null && e.newValue != '') {
        ___e1.classes.add(e.newValue);
      }
    });
    
    _stopWatcher___e2_3 = autogenerated.watchAndInvoke(() => activeClass, (e) {
      if (e.oldValue != null && e.oldValue != '') {
        ___e2.classes.remove(e.oldValue);
      }
      if (e.newValue != null && e.newValue != '') {
        ___e2.classes.add(e.newValue);
      }
    });
    
    _stopWatcher___e3_4 = autogenerated.watchAndInvoke(() => completedClass, (e) {
      if (e.oldValue != null && e.oldValue != '') {
        ___e3.classes.remove(e.oldValue);
      }
      if (e.newValue != null && e.newValue != '') {
        ___e3.classes.add(e.newValue);
      }
    });
    
    _stopWatcher_if___e4 = autogenerated.watchAndInvoke(() => anyDone, (e) {
      bool showNow = e.newValue;
      if (_child___e4 != null && !showNow) {
        // Remove any listeners/watchers on children
        
        _clearCompleted.on.click.remove(_listener_click_1);
        _listener_click_1 = null;
        
        _stopWatcher_clearCompleted_2();
        
        // Remove the actual child
        _child___e4.remove();
        _child___e4 = null;
      } else if (_child___e4 == null && showNow) {
        _child___e4 = _childTemplate___e4.clone(true);
        if (_childId___e4 != null && _childId___e4 != '') {
          _child___e4.id = _childId___e4;
        }
        // Initialize children
        
        if (_child___e4.id == "clear-completed") {
          _clearCompleted = _child___e4;
        } else {
          _clearCompleted = _child___e4.query('#clear-completed');
        }
        
        ___e4.parent.nodes.add(_child___e4);
        
        // Attach listeners/watchers
        
        _listener_click_1 = (e) {
          clearDone(e);
          autogenerated.dispatch();
        };
        _clearCompleted.on.click.add(_listener_click_1);
        
        _stopWatcher_clearCompleted_2 = autogenerated.watchAndInvoke(() => doneCount, (e) {
          _clearCompleted.innerHTML = '         Clear completed (${doneCount})       ';
        });
        
      }
    });
    
    // Call user-defined inserted();
    inserted();
  }
  
  void removed_autogenerated() {
    // Call user-defined removed();
    removed();
    
    _stopWatcher___e0_1();
    
    _stopWatcher___e1_2();
    
    _stopWatcher___e2_3();
    
    _stopWatcher___e3_4();
    
    _stopWatcher_if___e4();
    if (_child___e4 != null) {
      _child___e4.remove();
      // Remove any listeners/watchers on children
      
      _clearCompleted.on.click.remove(_listener_click_1);
      _listener_click_1 = null;
      
      _stopWatcher_clearCompleted_2();
      
    }
    
  }
  
  /** Original code from the component. */
  
  int get doneCount {
    int res = 0;
    app.todos.forEach((t) { if (t.done) res++; });
    return res;
  }
  
  int get remaining => app.todos.length - doneCount;
  
  String get allClass {
    if (window.location.hash == '' || window.location.hash == '#/') {
      return 'selected';
    } else {
      return null;
    }
  }
  String get activeClass =>
  window.location.hash == '#/active' ?  'selected' : null;
  
  String get completedClass =>
  window.location.hash == '#/completed' ?  'selected' : null;
  
  void clearDone(e) {
    app.todos = app.todos.filter((t) => !t.done);
  }
  
  bool get anyDone => doneCount > 0;
}

