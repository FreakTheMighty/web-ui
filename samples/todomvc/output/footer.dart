// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

#library('footer');
#import('dart:html');
#import('component.dart');
#import('model.dart');
#import('../../../watcher.dart');
#import('../../../webcomponents.dart');

/** The component associated with 'footer.html' (written by user). */
class FooterComponent extends _FooterComponent {
  FooterComponent(root, elem) : super(root, elem);

  int get doneCount() {
    int res = 0;
    app.todos.forEach((t) { if (t.done) res++; });
    return res;
  }

  int get remaining() => app.todos.length - doneCount;

  String get allClass() {
    if (window.location.hash == '' || window.location.hash == '#/') {
      return 'selected';
    } else {
      return null;
    }
  }
  String get activeClass() =>
      window.location.hash == '#/active' ?  'selected' : null;

  String get completedClass() =>
      window.location.hash == '#/completed' ?  'selected' : null;

  void clearDone() {
    app.todos = app.todos.filter((t) => !t.done);
  }

  bool get anyDone() => doneCount > 0;
}

/** Portions of the component autogenerated from the template. */
class _FooterComponent extends Component {

  _FooterComponent(root, elem) : super('footer', root, elem);

  SpanElement _todoCount;
  AnchorElement _allLink;
  AnchorElement _activeLink;
  AnchorElement _completedLink;
  ButtonElement _clearCompleted;

  Function _stop1;
  Function _stop2;
  Function _stop3;
  Function _stop4;
  EventListener _listener1;

  void created() {
    _todoCount = root.query('#todo-count');
    _allLink = root.query('#a1');
    _activeLink = root.query('#a2');
    _completedLink = root.query('#a3');
    manager[root.query("#condition")].shouldShow = (_) => anyDone;
  }

  void inserted() {
    _listener1 = (_) {
      clearDone();
      dispatch();
    };

    _stop4 = bind(() => anyDone, (_) {
      if (_clearCompleted != null) {
        _clearCompleted.on.click.remove(_listener1);
        _stop1();
      }
      // TODO(sigmund): this feels too hacky. This node is under a conditional,
      // but it is not a component. We should probably wrap it in an artificial
      // component so we can call the lifecycle methods [created], [inserted]
      // and [removed] on it.
      _clearCompleted = root.query('#clear-completed');
      if (_clearCompleted != null) {
        _clearCompleted.on.click.add(_listener1);
        _stop1 = bind(() => doneCount, (_) {
          _clearCompleted.innerHTML = 'Clear completed $doneCount';
        });
      }
    });

    _stop2 = bind(() => remaining, (_) {
      _todoCount.innerHTML = '<strong>$remaining</strong>';
    });

    _stop3 = bind(() => window.location.hash, (_) {
      _allLink.classes.clear();
      _activeLink.classes.clear();
      _completedLink.classes.clear();
      if (allClass != null) _allLink.classes.add(allClass);
      if (activeClass != null) _activeLink.classes.add(activeClass);
      if (completedClass != null) _completedLink.classes.add(completedClass);
    });
  }

  void removed() {
    if (_clearCompleted != null) {
      _clearCompleted.on.click.remove(_listener1);
      _stop1();
    }
    _stop2();
    _stop3();
    _stop4();
  }
}
