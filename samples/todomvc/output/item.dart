// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

#library('todoitem');
#import('dart:html');
#import('../../../component.dart');
#import('../../../watcher.dart');
#import('model.dart');

/** The component associated with 'item.html' (written by user). */
class TodoItemComponent extends _TodoItemComponent {
  Todo todo;
  bool _editing = false;

  TodoItemComponent(root, elem) : super(root, elem);

  String get itemClass() =>
      _editing ? 'editing' : (todo.done ? 'completed' : '');

  void created() {
    super.created();
    // TODO(jmesserly): bind this automatically
    todo = scopedVariables[element.attributes['data-todo']];
  }

  void edit() {
    _editing = true;
  }

  void update() {
    _editing = false;
  }

  void delete() {
    var list = app.todos;
    var index = list.indexOf(todo);
    if (index != -1) {
      list.removeRange(index, 1);
    }
  }
}

/** Portions of the component autogenerated from the template. */
class _TodoItemComponent extends Component {
  _TodoItemComponent(root, elem) : super('x-todo-item', root, elem);

  DivElement topDiv;
  LabelElement label;
  InputElement checkbox;
  ButtonElement destroy;
  InputElement editbox;
  void created() {
    super.created();
    label = root.query('#label');
    checkbox = root.query('#checkbox');
    destroy = root.query('button.destroy');
    editbox = root.query('input.edit');
    topDiv = root.query('#todo-item');
  }

  WatcherDisposer _stopWatcher1;
  EventListener _listener1;
  EventListener _listener3;
  EventListener _listener4;
  void inserted() {
    super.inserted();
    _stopWatcher1 = bind(() => todo.task, (_) { label.innerHTML = todo.task; });

    _listener1 = (_) {
      todo.done = checkbox.checked;
      dispatch();
    };
    checkbox.on.click.add(_listener1);

    _listener3 = (_) {
      editbox.value = todo.task;
      _listener4 = (_) {
        todo.task = editbox.value;
        dispatch();
      };
      editbox.on.blur.add(_listener4);
      editbox.on.change.add(_listener4);
      dispatch();
    };
    topDiv.on.doubleClick.add(_listener3);
  }

  void removed() {
    super.removed();
    _stopWatcher1();
    checkbox.on.click.remove(_listener1);
    topDiv.on.doubleClick.remove(_listener3);
  }
}
