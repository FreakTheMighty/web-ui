// Generated Dart class from HTML template footer.html.
// DO NOT EDIT.

#library('footer_html');

#import('dart:html');
#import('../../../lib/js_polyfill/component.dart');
#import('../../../watcher.dart');
#import('../../../lib/js_polyfill/web_components.dart');

/** Below import from script tag in HTML file. */
#import('model.dart');

/** Auto-generated Web Component class. */
class FooterComponent extends Component {
  /** User written code associated with this component 'footer.html'. */
  int get doneCount() {
    int res = 0;
    app.todos.forEach((t) { if (t.done) res++; });
    return res;
  }

  int get remaining() => app.todos.length - doneCount;

  String get allClass() {
    if (window.location.hash == '' || window.location.hash == '#/') {
      return 'selected';
    } else {
      return null;
    }
  }
  String get activeClass() =>
      window.location.hash == '#/active' ?  'selected' : null;

  String get completedClass() =>
      window.location.hash == '#/completed' ?  'selected' : null;

  void clearDone() {
    app.todos = app.todos.filter((t) => !t.done);
  }

  bool get anyDone() => doneCount > 0;

  /** Autogenerated from the template. */
  FooterComponent() : super('footer');

  SpanElement _todoCount;
  AnchorElement _a1;
  AnchorElement _a2;
  AnchorElement _a3;
  ButtonElement _clearCompleted;

  WatcherDisposer _stopWatcher_todoCount;
  WatcherDisposer _stopWatcher_a1;
  WatcherDisposer _stopWatcher_a2;
  WatcherDisposer _stopWatcher_a3;
  WatcherDisposer _stopWatcher_clearCompleted;
  EventListener _listener1;

  void created(ShadowRoot shadowRoot) {
    root = shadowRoot;
    _todoCount = root.query('#todo-count');
    _a1 = root.query('#a1');
    _a2 = root.query('#a2');
    _a3 = root.query('#a3');
    var condition = manager[root.query("#condition")];
    condition.shouldShow = (_) => anyDone;
  }

  void inserted() {
    _listener1 = (_) {
      clearDone();
      dispatch();
    };

    _stopWatcher_clearCompleted = bind(() => anyDone, (_) {
      if (_clearCompleted != null) {
        _clearCompleted.on.click.remove(_listener1);
        _stopWatcher_todoCount();
      }
      // TODO(sigmund): this feels too hacky. This node is under a conditional,
      // but it is not a component. We should probably wrap it in an artificial
      // component so we can call the lifecycle methods [created], [inserted]
      // and [removed] on it.
      _clearCompleted = root.query('#clear-completed');
      if (_clearCompleted != null) {
        _clearCompleted.on.click.add(_listener1);
        _stopWatcher_todoCount = bind(() => doneCount, (e) {
          _clearCompleted.innerHTML = 'Clear completed ${e.newValue}';
        });
      }
    });

    _stopWatcher_todoCount = bind(() => remaining, (e) {
      _todoCount.innerHTML = '<strong>${e.newValue}</strong>';
    });

    _stopWatcher_a1 = bind(() => window.location.hash, (_) {
      _a1.classes.clear();
      if (allClass != null) _a1.classes.add(allClass);
    });

    _stopWatcher_a2 = bind(() => window.location.hash, (_) {
      _a2.classes.clear();
      if (activeClass != null) _a2.classes.add(activeClass);
    });

    _stopWatcher_a3 = bind(() => window.location.hash, (_) {
      _a3.classes.clear();
      if (completedClass != null) _a3.classes.add(completedClass);
    });
}

  void removed() {
    if (_clearCompleted != null) {
      _clearCompleted.on.click.remove(_listener1);
      _stopWatcher_todoCount();
    }
    _stopWatcher_todoCount();
    _stopWatcher_a1();
    _stopWatcher_a2();
    _stopWatcher_a3();
    _stopWatcher_clearCompleted();
  }
}
